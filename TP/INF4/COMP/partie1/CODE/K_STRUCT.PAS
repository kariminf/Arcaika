{
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±       ±±                Cr‚er par:                  ±±       ±±
±±       ±±             ARIES Abd elkarim              ±±       ±±
±±       ±±       4iŠme ann‚e g‚nie informatique       ±±       ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±±±±±±±±±±  ±±±±±±±±±±±±±±±±±  ±±±±±±±±±±  ±±±±±±±   ±±±±±±±±±±±±
±±±±±±±±±±    ±±±±±±±±±±±±±±±    ±±±±±±±±±  ±±±±±±  ±±±±±±±±±±±±±±
±±±±±±±±±  ±±  ±±±±±±±±±±±±±  ±±  ±±±±±±±±  ±±±±±  ±±±±±±±±±±±±±±±
±±±±±±±±  ±±±±  ±±±±±±±±±±±  ±±±±  ±±±±±±±  ±±±±  ±±±±±±±±±±±±±±±±
±±±±±±±  ±±±±±±  ±±±±±±±±±  ±±±±±±  ±±±±±±  ±±±  ±±±±±±±±±±±±±±±±±
±±±±±±  ±±±±±±±±  ±±±±±±±  ±±±±±±±±  ±±±±±  ±   ±±±±±±±±±±±±±±±±±±
±±±±±  ±±±±±±±±±±  ±±±±±  ±±±±±±±±±±  ±±±±     ±±±±±±±±±±±±±±±±±±±
±±±±                ±±±                ±±±  ±±   ±±±±±±±±±±±±±±±±±
±±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±±±±±±±  ±±±  ±±±±   ±±±±±±±±±±±±±±±
±±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±   ±±±±±±±±±±±±±
±±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±±±   ±±±±±±±±±±±
±±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±±±±±   ±±±±±±±±±
±±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±±±±±±±  ±±±  ±±±±±±±±±±±±    ±±±±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±

±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±       ±±         L'unit‚e (K_STRUCT.tpu)            ±±       ±±
±±       ±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±       ±±
±±       Elle sert … sp‚cifier et contr“ler la structure de la  ±±
±±grammaire:cr‚ation des rŠgles, contr“le de type (Vt,Vn)...    ±±
±±                                                              ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±       ±± La structure du grammaire sera comme suite:±±       ±±
±±       ±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±       ±±
±±ÚÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄ¿    ÚÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄ¿          ±±
±±³ gauche³  droite³  ÄÄÄÄÄÄÄ>³ gauche³  droite³  /  ³          ±±
±±ÀÄÄÄ³ÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÙ    ÀÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÙ          ±±
±±    ³                                                         ±±
±±    ³    ÚÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄ¿    ÚÄÄÄÄÄÄÄÂÄÄÄÄÄÄÄÄÂÄÄÄÄÄ¿ ±±
±±    ÀÄÄÄ>³  val  ³terminal³  ÄÄÄÄÄÄÄ>³  val  ³terminal³  /  ³ ±±
±±	   ÀÄÄÄ³ÄÄÄÁÄÄÄ³ÄÄÄÄÁÄÄÄÄÄÙ    ÀÄÄÄÄÄÄÄÁÄÄÄÄÄÄÄÄÁÄÄÄÄÄÙ ±±
±±	       ³       ÀÄÄÄ> booleen                            ±±
±±	       ÀÄÄÄ> Chaine de caracteres                       ±±
±±                                                              ±±
±±                                                              ±±
±±ş La structure que pointe "droite" est la mˆme qu'au "gauche".±±
±±ş val c'est une chaŒne de caractŠres.                         ±±
±±                                                              ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±       ±±       Les fonctions de cette unit‚e:       ±±       ±±
±±       ±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±       ±±
±±ÉÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍËÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍÍ»±±
±±ºnouvelle_regle º ®la c‚ation d'une nouvelle rŠgle¯          º±±
±±ºnouvelle_partieº ®la c‚ation d'une nouvelle partie¯         º±±
±±ºlit_regle      º ®la lecture d'une rŠgle sp‚cifi‚e¯         º±±
±±ºlit_partie     º ®la lecture d'une partie sp‚cifier¯        º±±
±±º               º                                            º±±
±±                                                              ±±
±±                                                              ±±
±±                                                              ±±
±±                                                              ±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±±
}
unit k_struct;
{
//*******************************************
// d‚claration des types
//*******************************************
}
interface

Type
{-------------------------------------------}
partie=^part;
part=record
        terminal: boolean;
	val: string[10];
	suiv: partie;
     end;
{-------------------------------------------}
la_regle=^regle;
regle=record
         gauche: partie;
	 droite: partie;
         regle_suiv: la_regle;
      end;
{-------------------------------------------}

   procedure nouvelle_regle(var principale:la_regle;G,D:partie);
   procedure nouvelle_partie(var principale:partie;chaine:string;terminal:boolean);
   procedure lit_regle(principale:la_regle;var dest:la_regle;var G,D:partie);
   procedure lit_partie(principale:partie;var dest:partie;var chaine:string;var terminal:boolean);
   function in_partie(principale:partie;val:string):boolean;
   function in_liste(principale:partie;val:string):boolean;
   procedure copy_regle(principale:la_regle;var g_copy:la_regle);
   procedure copy_partie(principale:partie;var p_copy:partie);
   procedure sup_tot_partie(var une_partie:partie);
   procedure sup_tot_gram(var gram:la_regle);
   function tous_terminal(une_partie:partie):boolean;
   procedure remplacer(principale:la_regle;une_partie:partie;var g_remplacer:la_regle);
   function est_fnc(une_partie:partie):boolean;
   function est_fng(une_partie:partie):boolean;
   procedure trans_regle(var gram_src:la_regle;var gram_dest:la_regle;une_regle:la_regle);
   function consiste_de(une_regle:la_regle;gram:la_regle):boolean;
   function est_dans(une_regle:la_regle;gram:la_regle):boolean;
   function partie_g_egale(gram:la_regle;ensemble:partie):boolean;
   procedure sup_regle(une_regle:la_regle;var gram:la_regle);
   function est_appartient(ensemble,une_partie:partie):boolean;
   function tous_sont_que(une_partie,ensemble:partie):boolean;
   function _autre_regle_de(prin,ens:partie):boolean;
   procedure elimine_de(une_regle:la_regle;ens:partie;tous:boolean);
   procedure remplacer_premier(des_partie,src_partie:partie);
   procedure copy_concaten(var dest:partie;src1,src2:partie);
   procedure concat_gram(dest,src:la_regle);
   procedure copy_avec_nouv(var dest:partie;src1:partie;src2:string);
   function unitaire(partie_droite:partie):boolean;
   function N_definit_seul(gram:la_regle;var non_terminal:string;str,terminal:string):boolean;
   function existe_partie_droite(gram:la_regle;non_term:string):boolean;
   function recur_imediat(une_regle:la_regle):boolean;
   function recur_loin(rgl,gram:la_regle):boolean;


implementation
uses strings;
{//La fonction qui ajoute une nouvelle rŠgle
 //========================================= }
procedure nouvelle_regle(var principale:la_regle;G,D:partie);
var
   une_regle,tmp_regle :la_regle;
begin
   tmp_regle:=principale;
   new(une_regle);
   une_regle^.gauche:=G;
   une_regle^.droite:=D;
   une_regle^.regle_suiv:=nil;

   if(tmp_regle=nil)then
       principale:=une_regle
   else
   begin
	while(tmp_regle^.regle_suiv <> nil)do
	    tmp_regle:=tmp_regle^.regle_suiv;
	tmp_regle^.regle_suiv:=une_regle;
   end;
end;
{
//La fonction qui ajoute une nouvelle partie
//==========================================
}
procedure nouvelle_partie(var principale:partie;chaine:string;terminal:boolean);
var
   une_partie,tmp_partie:partie;
begin
   tmp_partie:=principale;

   new(une_partie);
   une_partie^.terminal:=terminal;
   une_partie^.val:=chaine;
   une_partie^.suiv:=nil;

   if(tmp_partie=nil)then
       principale:=une_partie
   else
   begin
	while(tmp_partie^.suiv <>nil)do
	    tmp_partie:=tmp_partie^.suiv;
	tmp_partie^.suiv:=une_partie;
   end;
end;{nouvelle partie}

{
//La fonction qui lit une regle pr‚cise
//=========================================
}
procedure lit_regle(principale:la_regle;var dest:la_regle;var G,D:partie);

begin

    if(principale<>nil)then
    begin
	G:=principale^.gauche;
	D:=principale^.droite;
        dest:=principale^.regle_suiv;
    end;
end; {lecture du regle}

{
//La fonction qui lit une partie pr‚cise
//=========================================
}
procedure lit_partie(principale:partie;var dest:partie;var chaine:string;var terminal:boolean);
begin
    if(principale<>nil)then
    begin
	chaine:=principale^.val;
	terminal:=principale^.terminal;
        dest:=principale^.suiv;
    end;
end; {lecture du regle}

{
//La fonction renvoie si une unit‚e existe dans une partie
//=========================================================
}
function in_partie(principale:partie;val:string):boolean;
var il_y_a:boolean;
begin
   il_y_a:=false;
   while (not il_y_a) and (principale<>nil) do
   begin
      if (principale^.val=val) and (not principale^.terminal) then
         il_y_a:=true;
      principale:=principale^.suiv;
   end;
   in_partie:=il_y_a;
end;

{
//La fonction renvoie s'il existe une valeur dans une chaine
sans tenir compte de la nature (non)terminal
//=========================================================
}
function in_liste(principale:partie;val:string):boolean;
var il_y_a:boolean;
begin
   il_y_a:=false;
   while (not il_y_a) and (principale<>nil) do
   begin
      if principale^.val=val then
         il_y_a:=true;
      principale:=principale^.suiv;
   end;
   in_liste:=il_y_a;
end;


{
//La fonction renvoie une copie d'une grammaire de type 2
//=========================================================
}
procedure copy_regle(principale:la_regle;var g_copy:la_regle);
var tmp_regle,une_regle:la_regle;
    g,d,partie_droite:partie;
begin
   g:=nil;
   d:=nil;
   nouvelle_partie(g,principale^.gauche^.val,false);
   partie_droite:=principale^.droite;
   while partie_droite<>nil do
   begin
      nouvelle_partie(d,partie_droite^.val,partie_droite^.terminal);
      partie_droite:=partie_droite^.suiv;
   end;
   nouvelle_regle(g_copy,g,d);
end;

{
//La fonction renvoie une copie d'une partie de type 2
//=========================================================
}
procedure copy_partie(principale:partie;var p_copy:partie);
begin
   while principale<>nil do
   begin
      nouvelle_partie(p_copy,principale^.val,principale^.terminal);
      principale:=principale^.suiv;
   end;
end;

{
//La procedure qui supprime totalement une partie
//================================================
}
procedure sup_tot_partie(var une_partie:partie);
var tmp1,tmp2:partie;
begin
   tmp1:=une_partie;
   while tmp1<>nil do
   begin
      tmp2:=tmp1^.suiv;
      dispose(tmp1);
      tmp1:=tmp2;
   end;
   une_partie:=nil;
end;

{
//La procedure qui supprime totalement une grammaire
//==================================================
}
procedure sup_tot_gram(var gram:la_regle);
var tmp1,tmp2:partie;
    gram0:la_regle;
begin
   while gram<>nil do
   begin
      dispose(gram^.gauche);
      tmp1:=gram^.droite;
      while tmp1<>nil do
      begin
         tmp2:=tmp1^.suiv;
         dispose(tmp1);
         tmp1:=tmp2;
      end;
      gram0:=gram;
      gram:=gram^.regle_suiv;
      dispose(gram0);
   end;
end;

{
//La procedure qui renvoie si la partie droite ne contient
que des terminaux
//======================================================
}
function tous_terminal(une_partie:partie):boolean;
var oui:boolean;
begin
   oui:=true;
   while oui and(une_partie<>nil) do
   begin
      if not une_partie^.terminal then
         oui:=false;
      une_partie:=une_partie^.suiv;
   end;
   tous_terminal:=oui;
end;

{
//La procedure qui remplace un non terminal d'une partie et
  l'enregistrer … la fin d'une autre grammaire … cr‚er.
//======================================================
}
procedure remplacer(principale:la_regle;une_partie:partie;var g_remplacer:la_regle);
var tmp_partie,g,d:partie;
    tmp_regle:la_regle;
    bool:boolean;
    gauche:string;
begin
   {recherche des regles d'un non terminal qui ont des terminaux … droite}
   bool:=false;
   tmp_partie:=une_partie;
   while (not bool) and (tmp_partie<>nil) do
   begin
      tmp_regle:=principale;
      gauche:=tmp_partie^.val;
      while (not bool)and (tmp_regle<>nil) do
      begin
         if tmp_regle^.gauche^.val=gauche then
            if not tous_terminal(tmp_regle^.droite) then
               bool:=true;
         tmp_regle:=tmp_regle^.regle_suiv;
      end;
      bool:=not bool;
      if not bool then
         tmp_partie:=tmp_partie^.suiv;
   end;
   {s'il y a une regle remplac‚e imm‚diatement}
   if bool then
   begin
      tmp_regle:=principale;
      while tmp_regle<>nil do
      begin
         nouvelle_partie(g,tmp_partie^.val,false);

      end;
   end;
end;

{
//La fonctionqui revoie si une partie est sou fnc
//================================================
}
function est_fnc(une_partie:partie):boolean;
var oui:boolean;
begin
   oui:=false;
   if (une_partie^.terminal) and (une_partie^.suiv=nil) then
      oui:=true;
   if not une_partie^.terminal then
      if une_partie^.suiv<>nil then
         if not une_partie^.suiv^.terminal then
            oui:=true;
   est_fnc:=oui;
end;

{
//La fonction qui revoie si une partie est sou fng
//================================================
}
function est_fng(une_partie:partie):boolean;
var oui:boolean;
begin
   oui:=true;
   if not une_partie^.terminal then
      oui:=false
   else
   begin
      une_partie:=une_partie^.suiv;
      while oui and (une_partie<>nil) do
      begin
         if une_partie^.terminal then
            oui:=false;
         une_partie:=une_partie^.suiv;
      end;
   end;

   est_fng:=oui;
end;

{
//La procedure qui transfert une regle vers une autre
//================================================
}
procedure trans_regle(var gram_src:la_regle;var gram_dest:la_regle;une_regle:la_regle);
var tmp_regle,tmp_regle2:la_regle;
begin
   if gram_src=une_regle then
   begin
      gram_src:=gram_src^.regle_suiv;
      if gram_dest=nil then
         gram_dest:=une_regle
      else {gram_dest<>nil}
      begin
         tmp_regle:=gram_dest;
         while tmp_regle^.regle_suiv<>nil do
            tmp_regle:=tmp_regle^.regle_suiv;
         tmp_regle^.regle_suiv:=une_regle;
      end;{gram_dest<>nil}
      une_regle^.regle_suiv:=nil;
   end {gram_src=une_regle}
   else{gram_src<>une_regle}
   begin
      tmp_regle:=gram_src;
      while tmp_regle^.regle_suiv<>une_regle do
         tmp_regle:=tmp_regle^.regle_suiv;
      tmp_regle^.regle_suiv:=une_regle^.regle_suiv;
      if gram_dest=nil then
         gram_dest:=une_regle
      else {gram_dest<>nil}
      begin
         tmp_regle:=gram_dest;
         while tmp_regle^.regle_suiv<>nil do
            tmp_regle:=tmp_regle^.regle_suiv;
         tmp_regle^.regle_suiv:=une_regle;
      end;{gram_dest<>nil}
      une_regle^.regle_suiv:=nil;
   end;{gram_src<>une_regle}
end;

{
//La procedure qui signifie si une rŠgle consiste des terminaux et des
  non terminaux gauches d'une grammaire
//================================================
}
function consiste_de(une_regle:la_regle;gram:la_regle):boolean;
var une_partie:partie;
    tmp_regle:la_regle;
    oui:boolean;
begin
   une_partie:=une_regle^.droite;
   oui:=true;

   while oui and (une_partie<>nil) do
   begin
      if not une_partie^.terminal then
      begin
         tmp_regle:=gram;
         while oui and(tmp_regle<>nil) do
         begin
            if tmp_regle^.gauche^.val=une_partie^.val then
               oui:=false;
            tmp_regle:=tmp_regle^.regle_suiv;
         end;
         oui:=not oui;
      end;
      une_partie:=une_partie^.suiv;
   end;
   consiste_de:=oui;
end;

{
//La fonction qui renvoit si une regle existe dans une grammaire
//================================================================
}
function est_dans(une_regle:la_regle;gram:la_regle):boolean;
var oui:boolean;
    tmp1,tmp2:partie;
begin
   oui:=false;
   while (not oui) and(gram<>nil) do
   begin
      if une_regle^.gauche^.val=gram^.gauche^.val then
      begin
         tmp1:=une_regle^.droite;
         tmp2:=gram^.droite;
         oui:=true;
         while oui and(tmp1<>nil)and(tmp2<>nil) do
         begin
            if tmp1^.terminal<>tmp2^.terminal then
               oui:=false
            else
               if tmp1^.val<>tmp2^.val then
                  oui:=false
               else
               begin
                  tmp1:=tmp1^.suiv;
                  tmp2:=tmp2^.suiv;
               end;
         end;
         if oui and (tmp1<>tmp2) then {les deux ne sont pas nils}
            oui:=false;
      end;
      gram:=gram^.regle_suiv;
   end;
   est_dans:=oui;
end;

{
//La fonction qui renvoit si les non terminaux des parties gauches
  d'une grammaire sont les mˆmes que l'ensemble
//================================================================
}
function partie_g_egale(gram:la_regle;ensemble:partie):boolean;
var oui:boolean;
    tmp:partie;
begin
   oui:=true;
   while oui and(gram<>nil) do
   begin
      tmp:=ensemble;
      oui:=false;
      while (not oui) and(tmp<>nil) do
      begin
         if gram^.gauche^.val=tmp^.val then
            oui:=true;
         tmp:=tmp^.suiv;
      end;
      gram:=gram^.regle_suiv;
   end;
   partie_g_egale:=oui;
end;

{
//La procedure qui supprime une regle d'une grammaire
//====================================================
}
procedure sup_regle(une_regle:la_regle;var gram:la_regle);
var tmp:la_regle;
begin
   if gram=une_regle then
      gram:=gram^.regle_suiv
   else
   begin
      tmp:=gram;
      while tmp^.regle_suiv<>une_regle do
         tmp:=tmp^.regle_suiv;
      tmp^.regle_suiv:=une_regle^.regle_suiv;
   end;
   dispose(une_regle);
end;

{
//La foction qui renvoit si un non terminal d'une partie
appartient … une ensemble
//====================================================
}
function est_appartient(ensemble,une_partie:partie):boolean;
var oui:boolean;
    tmp:partie;
begin
   oui:=true;;
   while (oui)and (une_partie<>nil) do
   begin
      if not une_partie^.terminal then
      begin
         tmp:=ensemble;
         oui:=false;
         while (not oui)and(tmp<>nil) do
         begin
            if une_partie^.val=tmp^.val then
               oui:=true;
            tmp:=tmp^.suiv;
         end;
      end;
      une_partie:=une_partie^.suiv;
   end;
   est_appartient:=oui;
end;

{
//La foction qui renvoit si une partie ne contient que des non terminaux
et qui sont appartenus … une ensemble pr‚cise.
//======================================================================
}
function tous_sont_que(une_partie,ensemble:partie):boolean;
var oui:boolean;
    tmp:partie;
begin
   oui:=true;
   while oui and (une_partie<>nil) do
   begin
      if une_partie^.terminal then
         oui:=false
      else
      begin
         tmp:=ensemble;
         oui:=false;
         while (not oui) and(tmp<>nil) do
         begin
            if une_partie^.val=tmp^.val then
               oui:=true;
            tmp:=tmp^.suiv;
         end;
      end;
      une_partie:=une_partie^.suiv;
   end;
   tous_sont_que:=oui;
end;


function autre_regle_de(par:partie;s:string):boolean;
begin
   while par^.val<>s do
      par:=par^.suiv;
   autre_regle_de:=par^.terminal;
end;

{
//rendre si une partie droite a des non trminaux qui donnent une
production autre que î
//=================================================================
}
function _autre_regle_de(prin,ens:partie):boolean;
var bb:boolean;
begin
   bb:=false;
   while (prin<>nil)and(not bb) do
   begin
      if (not prin^.terminal)and(in_liste(ens,prin^.val)) then
         bb:=autre_regle_de(ens,prin^.val);
      prin:=prin^.suiv;
   end;
   _autre_regle_de:=bb;
end;
{
//elimine les non terminaux de "ens" de la partie gauche de chaque
regle de "g_fct"
//=================================================================
}
procedure elimine_de(une_regle:la_regle;ens:partie;tous:boolean);
var tmp,tmp2,tmp3:partie;
begin
   tmp:=une_regle^.droite;
   while tmp<>nil do
   begin
      tmp3:=tmp^.suiv;
      if tmp^.terminal then
         tmp2:=tmp
      else
         if not in_liste(ens,tmp^.val) then
            tmp2:=tmp
         else
         begin
            if tous then
            begin
               if tmp=une_regle^.droite then
                  une_regle^.droite:=tmp^.suiv
               else
                  tmp2^.suiv:=tmp3;
               dispose(tmp);
            end
            else
               if not autre_regle_de(ens,tmp^.val) then
               begin
                  if tmp=une_regle^.droite then
                     une_regle^.droite:=tmp^.suiv
                  else
                     tmp2^.suiv:=tmp3;
                  dispose(tmp);
               end;
         end;
      tmp:=tmp3;
   end;

end;

{
//remplace le premier non terminal de "des_partie" par "src_partie"
//=================================================================
}
procedure remplacer_premier(des_partie,src_partie:partie);
var nouv_partie,suiv_partie:partie;
begin
   des_partie^.val:=src_partie^.val;
   des_partie^.terminal:=src_partie^.terminal;
   if src_partie^.suiv<>nil then
   begin
      suiv_partie:=des_partie^.suiv;
      {on copie src_partie sauf la premiere case}
      nouv_partie:=nil;
      copy_partie(src_partie^.suiv,nouv_partie);
      des_partie^.suiv:=nouv_partie;
      while nouv_partie^.suiv<>nil do
         nouv_partie:=nouv_partie^.suiv;
      nouv_partie^.suiv:=suiv_partie;
   end;
end;

{
//cr‚er une partie qui est la concat‚nation d'une partie par une autre
//====================================================================
}
procedure copy_concaten(var dest:partie;src1,src2:partie);
var partie1,partie2:partie;
begin
   partie1:=nil;
   copy_partie(src1,partie1);
   dest:=partie1;
   partie2:=nil;
   copy_partie(src2,partie2);
   while partie1^.suiv<>nil do
      partie1:=partie1^.suiv;
   partie1^.suiv:=partie2;
end;

{
//copie une partie vers la dest avec un non terminal … la fin
//=============================================================
}
procedure copy_avec_nouv(var dest:partie;src1:partie;src2:string);
var partie1,partie2:partie;
begin
   partie1:=nil;
   partie2:=nil;
   copy_partie(src1,partie1);
   nouvelle_partie(partie2,src2,false);
   dest:=partie1;
   while partie1^.suiv<>nil do
      partie1:=partie1^.suiv;
   partie1^.suiv:=partie2;
end;

{
//la concat‚nation entre deux grammaires non nulles
//========================================
}
procedure concat_gram(dest,src:la_regle);
begin
   while dest^.regle_suiv<>nil do
      dest:=dest^.regle_suiv;
   dest^.regle_suiv:=src;
end;

{
//rendre si une partie droite est unitaire
//=========================================
}
function unitaire(partie_droite:partie):boolean;
var oui:boolean;
begin
   oui:=true;
   if partie_droite^.terminal then
      oui:=false
   else
      if partie_droite^.suiv<>nil then
         oui:=false;
   unitaire:=oui;
end;

{
//Renvoit s'il y a un non terminal qui definit un terminal d'une maniŠre
atomique dans une grammaire sous fnc(c…d ne d‚finit que ce terminal)
//=======================================================================
}
function N_definit_seul(gram:la_regle;var non_terminal:string;str,terminal:string):boolean;
var il_y_a:boolean;
    s:string[2];
    i:integer;
begin
   il_y_a:=false;
   while (not il_y_a)and(gram<>nil) do
   begin
      if gram^.droite^.terminal then
         if (gram^.droite^.val=terminal)and(length(gram^.gauche^.val)>2) then
         begin
            s:=gram^.gauche^.val;
            if s=str then
            begin
               non_terminal:=gram^.gauche^.val;
               il_y_a:=true;
            end;
         end;
      gram:=gram^.regle_suiv;
   end;
   N_definit_seul:=il_y_a;
end;
{
//cherche si un non terminal existe dans la partie droite d'une grammaire
//=======================================================================
}
function existe_partie_droite(gram:la_regle;non_term:string):boolean;
var bb:boolean;
begin
   bb:=false;
   while (not bb)and(gram<>nil)do
   begin
      bb:=in_partie(gram^.droite,non_term);
      gram:=gram^.regle_suiv;
   end;
   existe_partie_droite:=bb;
end;

{
//S'il y a une r‚curence … gauche imm‚diate
//=========================================
}
function recur_imediat(une_regle:la_regle):boolean;
var bb:boolean;
begin
   bb:=false;
   if not une_regle^.droite^.terminal then
      if une_regle^.gauche^.val=une_regle^.droite^.val then
         bb:=true;
   recur_imediat:=bb;
end;

{
//S'il y a une r‚curence … gauche non imm‚diate
//=============================================
}
function recur_loin(rgl,gram:la_regle):boolean;
var nouv,tmp,tmp2,la:la_regle;
    d,g:partie;
    b:boolean;
begin
   nouv:=nil;
   tmp:=gram;
   b:=false;{n'est pas r‚curente}
   while tmp<>rgl do
   begin
      if not tmp^.droite^.terminal then
         copy_regle(tmp,nouv);
      tmp:=tmp^.regle_suiv;
   end;

   tmp:=nouv;
   while tmp<>nil do
   begin
      tmp2:=tmp;
      la:=nil;
      while tmp2<>tmp do
      begin
         if tmp^.droite^.val=tmp2^.gauche^.val then
            begin
               d:=nil;
               g:=nil;
               nouvelle_partie(g,tmp^.gauche^.val,false);
               copy_concaten(d,tmp2^.droite,tmp^.droite^.suiv);
               nouvelle_regle(la,g,d);
            end;
         tmp2:=tmp2^.regle_suiv;
      end;
      if la<>nil then
      begin
         d:=tmp^.droite;
         tmp^.droite:=la^.droite;
         dispose(d);
         tmp2:=la;
         la:=la^.regle_suiv;
         dispose(la);
         if la<>nil then
         begin
            tmp2:=tmp^.regle_suiv;
            tmp^.regle_suiv:=la;
            while la^.regle_suiv<>nil do
               la:=la^.regle_suiv;
            la^.regle_suiv:=tmp2;
            tmp:=la;
         end;
      end;
      tmp:=tmp^.regle_suiv;
   end;

   tmp2:=nouv;
   la:=nil;
   while tmp2<>nil do
   begin
         if rgl^.droite^.val=tmp2^.gauche^.val then
         begin
            d:=nil;
            g:=nil;
            nouvelle_partie(g,rgl^.gauche^.val,false);
            copy_concaten(d,tmp2^.droite,rgl^.droite^.suiv);
            nouvelle_regle(la,g,d);
         end;
      tmp2:=tmp2^.regle_suiv;
   end;
   sup_tot_gram(nouv);

   tmp:=la;
   while tmp<>nil do
   begin
         if tmp^.gauche^.val<>tmp^.droite^.val then
         begin
            tmp2:=tmp^.regle_suiv;
            sup_regle(tmp,la);
            tmp:=tmp2;
         end
         else
            tmp:=tmp^.regle_suiv;
   end;
   if la<>nil then
   begin
      b:=true;{elle est r‚curente}
      d:=rgl^.droite;
      rgl^.droite:=la^.droite;
      la^.droite:=nil;
      tmp:=la^.regle_suiv;
      dispose(d);
      dispose(la);
      if tmp<>nil then
      begin
         tmp2:=rgl^.regle_suiv;
         rgl^.regle_suiv:=tmp;
         while tmp^.regle_suiv<>nil do
            tmp:=tmp^.regle_suiv;
         tmp^.regle_suiv:=tmp2;
      end;
   end;
   recur_loin:=b;
end;

end.
